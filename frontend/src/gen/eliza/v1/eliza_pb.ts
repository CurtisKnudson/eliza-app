// @generated by protoc-gen-es v0.2.0 with parameter "target=ts"
// @generated from file eliza/v1/eliza.proto (package eliza.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * @generated from message eliza.v1.TalkRequest
 */
export class TalkRequest extends Message<TalkRequest> {
  /**
   * @generated from field: string sentence = 1;
   */
  sentence = "";

  constructor(data?: PartialMessage<TalkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eliza.v1.TalkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sentence", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TalkRequest {
    return new TalkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TalkRequest {
    return new TalkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TalkRequest {
    return new TalkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TalkRequest | PlainMessage<TalkRequest> | undefined, b: TalkRequest | PlainMessage<TalkRequest> | undefined): boolean {
    return proto3.util.equals(TalkRequest, a, b);
  }
}

/**
 * @generated from message eliza.v1.TalkResponse
 */
export class TalkResponse extends Message<TalkResponse> {
  /**
   * @generated from field: string sentence = 1;
   */
  sentence = "";

  constructor(data?: PartialMessage<TalkResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "eliza.v1.TalkResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sentence", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TalkResponse {
    return new TalkResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TalkResponse {
    return new TalkResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TalkResponse {
    return new TalkResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TalkResponse | PlainMessage<TalkResponse> | undefined, b: TalkResponse | PlainMessage<TalkResponse> | undefined): boolean {
    return proto3.util.equals(TalkResponse, a, b);
  }
}

